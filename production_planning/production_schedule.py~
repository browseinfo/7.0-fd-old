# -*- coding: utf-8 -*-
##############################################################################
#
#    This module uses OpenERP, Open Source Management Solution Framework.
#    Copyright (C) 2014-Today BrowseInfo (<http://www.browseinfo.in>)
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>
#
##############################################################################

import time
from openerp.osv import osv, fields
from openerp.tools.translate import _
import openerp.addons.decimal_precision as dp

class production_schedule(osv.Model):
    _inherit = ['mail.thread', 'ir.needaction_mixin']
    _name = 'production.schedule'
    
    _columns = {
        'plan_ref': fields.char('Plan Reference'),
        'start_date': fields.date('Start Date'),
        'end_date': fields.date('End Date'),
        'state': fields.selection([
            ('draft', 'Draft'),
            ('confirm', 'Confirmed'),
            ('cancel', 'Cancel'),
            ('done', 'Done'), ], 'Status'),
        'order_line': fields.one2many('production.schedule.line', 'order_id', 'Order Lines', states={'confirm': [('readonly', False)]}),
        'forecast_id': fields.many2one('sales.forecast', 'Sale Forecast', required=True),
        'branch_id': fields.many2one('res.branch', 'Branch', required=True),
        'period_id': fields.many2one('account.period', 'Period'),
    }   
    
    _defaults = {
        'state': 'draft',
    }
    
    def forecast_id_change(self, cr, uid, ids, forecast_id, context=None):
        vals = {}
        forecast_pool = self.pool.get('sales.forecast')
        final_vals = {}
        line_list = []
        forecast = forecast_pool.browse(cr, uid, [forecast_id], context=context)
        if forecast[0].order_line:
            for line in forecast[0].order_line:
                month_qty = line.product_qty / 3
                line_list.append({
                    'product_id': line.product_id.id,
                    'product_uom': line.product_uom.id,
                    'on_hand': 0.0,  
                    'product_qty': line.product_qty,
                    'month_one': month_qty,
                    'month_two': month_qty,
                    'month_three': month_qty,
                })
        final_vals = {
            'branch_id': forecast[0].branch_id.id,
            'order_line': line_list
        }
        return {'value': final_vals}
    
    def create(self, cr, uid, vals, context=None):
        vals['plan_ref'] = 'Plan Reference/' + self.pool.get('ir.sequence').get(cr, uid, 'production.schedule')
        return super(production_schedule, self).create(cr, uid, vals, context=context)
        
    def action_button_confirm(self, cr, uid, ids, context=None):
        current_obj = self.browse(cr, uid, ids, context=context)[0]
        current_obj.write({'state': 'confirm'})
        return True
        
    def action_button_cancel(self, cr, uid, ids, context=None):
        current_obj = self.browse(cr, uid, ids, context=context)[0]
        current_obj.write({'state': 'cancel'})
        return True
        
    def action_button_redraft(self, cr, uid, ids, context=None):
        current_obj = self.browse(cr, uid, ids, context=context)[0]
        current_obj.write({'state': 'draft'})
        return True
    
    def action_button_done(self, cr, uid, ids, context=None):
        current_obj = self.browse(cr, uid, ids, context=context)[0]
        current_obj.write({'state': 'done'})
        return True
        
class production_schedule_line(osv.Model):       
    _name = 'production.schedule.line'

    def merge_lists(self,l1, l2, key):
        merged = {}
        for item in l1+l2:
            if item[key] in merged:
                merged[item[key]].update(item)
            else:
                merged[item[key]] = item
        return [val for (_, val) in merged.items()]

    def _onhand_qty(self, cr, uid, ids, fields, arg, context=None):
        res = {}
        for line in self.browse(cr, uid, ids, context=context):
            for product_qty in self.pool.get('product.product').browse(cr, uid, [line.product_id.id], context=context):
                res[line.id] = product_qty.qty_available
        return res
    
    _columns = {
        'product_id': fields.many2one('product.product', 'Description', required=True),
        'product_uom': fields.many2one('product.uom', 'UoM ', required=True),
        'order_id': fields.many2one('production.schedule', 'Order Reference'),
        #'on_hand': fields.float('Stock on Hand'),
        'on_hand': fields.function(_onhand_qty, string='Stock on Hand', type='float'),
        'month_one': fields.float('Month1'),
        'month_two': fields.float('Month2'),
        'month_three': fields.float('Month3'),
        'product_qty': fields.float('Plan'),
        #'dummy_button': fields.boolean('Dummy'),
    }
    
    def product_id_change(self, cr, uid, ids, product_id, context=None):
        vals = {}
        product_uom_obj = self.pool.get('product.uom')
        product_obj = self.pool.get('product.product')
        product_browse = product_obj.browse(cr, uid, [product_id], context=context)[0]
        
        if product_browse.uom_id.id:
            vals['product_uom'] = product_browse.uom_id.id
        return {'value': vals}
        
    _defaults = {
    }

# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
